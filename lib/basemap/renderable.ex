defmodule Basemap.Renderable do
  @doc """
  Returns the project-relative path to the artifact generated by this layer. For
  intermediary layers that's usally a .mbtiles file in the cache directory.
  Final layers are usually a directory with individual .pbf files, ready to be
  served.
  """
  @callback target(:container | :cache) :: Path.t()

  @doc """
  Should return true if artifacts need updating.
  """
  @callback staleness() :: {stale? :: boolean(), reason :: binary()}

  @doc """
  Render/create the tiles.
  """
  @callback render() :: :ok | {:error, binary()}

  defmacro __using__(_opts) do
    quote do
      require Benchmark
      @behaviour Basemap.Renderable

      def name(), do: Path.basename(unquote(__CALLER__.file), ".ex")
      def path(:cache, extra), do: Path.join("data/cache/basemap/#{name()}", extra)
      def path(:container, extra), do: Path.join("/workdir/basemap/#{name()}", extra)

      def ensure() do
        ident = "basemap #{name()}"
        {stale, reason} = Benchmark.measure("#{ident} staleness check", &staleness/0)

        if stale do
          Logger.info("#{ident} is stale because #{reason}")
          Benchmark.measure("#{ident} rendering", &render/0)
        end
      end

      @impl Basemap.Renderable
      def target(where), do: path(where, "")
      defoverridable target: 1
    end
  end
end
